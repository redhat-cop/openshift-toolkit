---
- name: "K8s Migrate PVs | Set destination PVs to 'Retain' so they do not delete when their temporary PVC is deleted | {{ _k8s_pv_migrator_namespace }}"
  k8s:
    api_key: "{{ k8s_api_key }}"
    kind: PersistentVolume
    namespace: "{{ _k8s_pv_migrator_namespace }}"
    name: "{{ pvc_destination.spec.volumeName }}"
    definition:
      spec:
        persistentVolumeReclaimPolicy: 'Retain'
  loop: "{{ pvcs_destinations }}"
  loop_control:
    loop_var: pvc_destination
  register: pv_destinations_updates

- name: "K8s Migrate PVs | Delete temporary destination PVCs | {{ _k8s_pv_migrator_namespace }}"
  k8s:
    api_key: "{{ k8s_api_key }}"
    kind: PersistentVolumeClaim
    namespace: "{{ _k8s_pv_migrator_namespace }}"
    name: "{{ pvc_destination.metadata.name }}"
    state: absent
  loop: "{{ pvcs_destinations }}"
  loop_control:
    loop_var: pvc_destination

- name: "K8s Migrate PVs | Set source PVs to 'Retain' and label | {{ _k8s_pv_migrator_namespace }}"
  k8s:
    api_key: "{{ k8s_api_key }}"
    kind: PersistentVolume
    name: "{{ pvc_source_and_destination.0.spec.volumeName }}"
    definition:
      metadata:
        labels:
          migrated: "true"
          migrated-to-pv: "{{ pvc_source_and_destination.1.spec.volumeName }}"
      spec:
        persistentVolumeReclaimPolicy: 'Retain'
  loop: "{{ pvcs_sources | zip(pvcs_destinations) | list }}"
  loop_control:
    loop_var: pvc_source_and_destination

- name: "K8s Migrate PVs | Delete source PVCs | {{ _k8s_pv_migrator_namespace }}"
  k8s:
    api_key: "{{ k8s_api_key }}"
    kind: PersistentVolumeClaim
    namespace: "{{ _k8s_pv_migrator_namespace }}"
    name: "{{ pvc_source.metadata.name }}"
    state: absent
  loop: "{{ pvcs_sources }}"
  loop_control:
    loop_var: pvc_source

- name: "K8s Migrate PVs | Remove claimRef from destination PVs and update labels | {{ _k8s_pv_migrator_namespace }}"
  k8s:
    api_key: "{{ k8s_api_key }}"
    kind: PersistentVolume
    namespace: "{{ _k8s_pv_migrator_namespace }}"
    name: "{{ pvc_source_and_destination.1.spec.volumeName }}"
    definition:
      metadata:
        labels:
          migrated-from-pv: "{{ pvc_source_and_destination.0.spec.volumeName }}"
      spec:
        claimRef: Null
  loop: "{{ pvcs_sources | zip(pvcs_destinations) | list }}"
  loop_control:
    loop_var: pvc_source_and_destination

- name: "K8s Migrate PVs | Create new PVC with origional source PVC name pre-bound to new destination PV created in new storage class | {{ _k8s_pv_migrator_namespace }}"
  k8s:
    api_key: "{{ k8s_api_key }}"
    kind: PersistentVolumeClaim
    namespace: "{{ _k8s_pv_migrator_namespace }}"
    state: present
    apply: yes
    resource_definition: "{{ pvc_source_and_destination.0 | combine({'spec':{'storageClassName': pvc_source_and_destination.1.spec.storageClassName }}, {'spec':{'volumeName': pvc_source_and_destination.1.spec.volumeName}}, {'metadata':{'labels':{'migrated-from-pv':pvc_source_and_destination.0.spec.volumeName}}}, {'metadata':{'resourceVersion': None}}, recursive=True) }}"
  loop: "{{ pvcs_sources | zip(pvcs_destinations) | list }}"
  loop_control:
    loop_var: pvc_source_and_destination

- name: "K8s Migrate PVs | Set destination PVs back to their orgional reclaim policy | {{ _k8s_pv_migrator_namespace }}"
  k8s:
    api_key: "{{ k8s_api_key }}"
    kind: PersistentVolume
    name: "{{ pv_destination_update.result.metadata.name }}"
    definition:
      spec:
        persistentVolumeReclaimPolicy: "{{ pv_destination_update.diff.before.spec.persistentVolumeReclaimPolicy | default('Retain') }}"
  loop: "{{ pv_destinations_updates.results }}"
  loop_control:
    loop_var: pv_destination_update
